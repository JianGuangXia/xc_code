
#if !defined(__COLORSET__)
#define __COLORSET__

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#include "singleton.h"
#include <afx.h>

class CColorSet;
//typedef Singleton<CColorSet> SingleColorSet;
#define SingleColorSet Singleton<CColorSet>::Instance()

	enum COLOR_IT
	{
		MIN_COLORSET = 0,
			
		EDIT_BACK_ACTIVE,
		EDIT_BACK_INACTIVE,
		EDIT_BACK_DISABLE,
		EDIT_TEXT_ACTIVE,
		EDIT_TEXT_INACTIVE,

		STATIC_ACTIVE,
		STATIC_INACTIVE,
		STATIC_TEXT_WHITE,
		STATIC_TEXT_WHITE1,
        STATIC_TEXT_WHITE2,
        STATIC_TEXT_RED,
        STATIC_TEXT_GREEN,
        STATIC_TEXT_BLUE5,
		STATIC_TEXT_GRAY,
		STATIC_TEXT_GRAY5,
        STATIC_LOGIN_WHITE,
        STATIC_MODIFYPWD_RED,
        STATIC_MODIFYPWD_WHITE,
        STATIC_FUNDVIEW_GRAY,
        STATIC_ORDERCONFIRM_GRAY,
		STATIC_TEXT_BK_GRAY1,
		STATIC_TEXT_BK_GRAY2,
		STATIC_TEXT_BK_GRAY5,
		STATIC_TEXT_BK_RED3,
		STATIC_TEXT_BK_GREEN3,
		STATIC_TEXT_BK_BLUE3,
		STATIC_TEXT_BK_BLUE4,
		STATIC_GUARDIAN_YELLOW3,

        BUTTON_BACK_ACTIVE,
		BUTTON_BACK_INACTIVE,
        BUTTON_HOVER_RED,
        BUTTON_HOVER_GREEN,
        BUTTON_HOVER_BLUE,
        BUTTON_HOVER_GRAY,
		BUTTON_TEXT_WHITE,
		BUTTON_TEXT_RED,
		BUTTON_FACE_BLUE,
		BUTTON_FACE_RED,
        BUTTON_FACE_GREEN,

		CHECKBOX_BACK_ACTIVE,
		CHECKBOX_BACK_INACTIVE,
		CHECKBOX_BACK_BLACK,

		RADIOBTN_BACK_ACTIVE,
		RADIOBTN_BACK_INACTIVE,

		LISTBOX_BACK_ACTIVE,
		LISTBOX_BACK_INACTIVE,
		LISTBOX_TEXT_ACTIVE,
		LISTBOX_TEXT_INACTIVE,

		FORMVIEW_BACK,
		INFOTIP_BACK,
		MSGBOX_BACK,

		GRID_BKCOLOR,
        GRID_FIXED_BKCOLOR,
		GRID_TEXT_BKCOLOR,
        GRID_TEXT_WHITE,
        GRID_TEXT_RED,
		GRID_TEXT_GREEN,
		GRID_TEXT_YELLOW,
		GRID_ODDLINE_COLOR,
		GRID_EVENLINE_COLOR,
		GRID_BK_GRAY,
		GRID_BK_RED,
		GRID_BK_GREEN,
		GRID_BK_GRAYGREEN,
		GRID_BK_YELLOW,

		TABCTRL_ITEM_ACTIVE,
		TABCTRL_ITEM_INACTIVE,
		TABCTRL_TEXT_ACTIVE,
		TABCTRL_TEXT_INACTIVE,
		TABCTRL_BACK,

		VIEWTAB_ITEM_ACTIVE,
		VIEWTAB_ITEM_INACTIVE,
		VIEWTAB_TEXT_ACTIVE,
		VIEWTAB_TEXT_INACTIVE,

		VIEWBORDER_ACTIVE,	
		VIEWBORDER_UNACTIVE,	

		TREEMENU_BACK,
		TREEMENU_SELECTD_BACK,
		TREEMENU_SELECTD_TEXT,
		TREEMENU_NOTSELECTD_TEXT,

		TREECTRL_BACK,
		
		GROUPBOX_BACK,

		MARKET_FONT_UP,
		MARKET_FONT_DOWN,

		SELL_BACK,
		BUY_BACK,
		
		ERROR_TEXT_COLOR,

		PEN_BACK_BLUE,

		DLG_BACK,
        FUNDVIEW_BACK,

		TAB_BK_COLOR,
		TABITEM_SELECTED_COLOR,

		CONNECT_COLOR,
		DISCONNECT_COLOR,

        MAX_COLORSET
	};
class CColorSet
{
public:
	CColorSet();

	void LoadColorFile(CString const& szOpCode,CString const& szPath);
	void SaveColorFile();
	LPCTSTR GetComment(COLOR_IT it);
	COLORREF GetColor(int it);
	void SetColor(COLOR_IT it, COLORREF crValue);
	BOOL ResetColor(COLOR_IT it);
	BOOL ResetAllColor();

	virtual ~CColorSet();
	
//	COLORREF GetColorValue(COLOR_ITnColorID) ReadColorValue(#nColorID, nColorID)
//	void SetColorValue(nColorID, crValue) WriteColorValue(#nColorID, crValue)

protected:
	static TCHAR m_szColorFile[_MAX_PATH];
	bool	m_bLoadColor;


//	static COLORSET m_arrColorSet[MAX_COLORSET-1];

	static COLORREF	m_crCurArr[MAX_COLORSET-1];	// 当前颜色值

	COLORREF ReadColorValue(LPCTSTR szColorID, int nDefColor);
	void WriteColorValue(LPCTSTR szColorID, COLORREF crValue);
};

typedef struct tagColorSet
{
	COLOR_IT	nID;
	COLORREF	crDefault;	// 缺省颜色值
	TCHAR		szComment[40];
} COLORSET;

#endif // !defined(__COLORSET__)

